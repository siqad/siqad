# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _simanneal
else:
    import _simanneal

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simanneal.delete_SwigPyIterator

    def value(self):
        return _simanneal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _simanneal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _simanneal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _simanneal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _simanneal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _simanneal.SwigPyIterator_copy(self)

    def next(self):
        return _simanneal.SwigPyIterator_next(self)

    def __next__(self):
        return _simanneal.SwigPyIterator___next__(self)

    def previous(self):
        return _simanneal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _simanneal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _simanneal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _simanneal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _simanneal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _simanneal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _simanneal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _simanneal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _simanneal:
_simanneal.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _simanneal.ios_base_erase_event
    imbue_event = _simanneal.ios_base_imbue_event
    copyfmt_event = _simanneal.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _simanneal.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _simanneal.ios_base_flags(self, *args)

    def setf(self, *args):
        return _simanneal.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _simanneal.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _simanneal.ios_base_precision(self, *args)

    def width(self, *args):
        return _simanneal.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _simanneal.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _simanneal.ios_base_imbue(self, __loc)

    def getloc(self):
        return _simanneal.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _simanneal.ios_base_xalloc()

    def iword(self, __ix):
        return _simanneal.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _simanneal.ios_base_pword(self, __ix)
    __swig_destroy__ = _simanneal.delete_ios_base

# Register ios_base in _simanneal:
_simanneal.ios_base_swigregister(ios_base)
cvar = _simanneal.cvar
ios_base.boolalpha = _simanneal.cvar.ios_base_boolalpha
ios_base.dec = _simanneal.cvar.ios_base_dec
ios_base.fixed = _simanneal.cvar.ios_base_fixed
ios_base.hex = _simanneal.cvar.ios_base_hex
ios_base.internal = _simanneal.cvar.ios_base_internal
ios_base.left = _simanneal.cvar.ios_base_left
ios_base.oct = _simanneal.cvar.ios_base_oct
ios_base.right = _simanneal.cvar.ios_base_right
ios_base.scientific = _simanneal.cvar.ios_base_scientific
ios_base.showbase = _simanneal.cvar.ios_base_showbase
ios_base.showpoint = _simanneal.cvar.ios_base_showpoint
ios_base.showpos = _simanneal.cvar.ios_base_showpos
ios_base.skipws = _simanneal.cvar.ios_base_skipws
ios_base.unitbuf = _simanneal.cvar.ios_base_unitbuf
ios_base.uppercase = _simanneal.cvar.ios_base_uppercase
ios_base.adjustfield = _simanneal.cvar.ios_base_adjustfield
ios_base.basefield = _simanneal.cvar.ios_base_basefield
ios_base.floatfield = _simanneal.cvar.ios_base_floatfield
ios_base.badbit = _simanneal.cvar.ios_base_badbit
ios_base.eofbit = _simanneal.cvar.ios_base_eofbit
ios_base.failbit = _simanneal.cvar.ios_base_failbit
ios_base.goodbit = _simanneal.cvar.ios_base_goodbit
ios_base.app = _simanneal.cvar.ios_base_app
ios_base.ate = _simanneal.cvar.ios_base_ate
ios_base.binary = _simanneal.cvar.ios_base_binary
ios_base.ios_base_in = _simanneal.cvar.ios_base_ios_base_in
ios_base.out = _simanneal.cvar.ios_base_out
ios_base.trunc = _simanneal.cvar.ios_base_trunc
ios_base.beg = _simanneal.cvar.ios_base_beg
ios_base.cur = _simanneal.cvar.ios_base_cur
ios_base.end = _simanneal.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _simanneal.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return _simanneal.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _simanneal.ios_rdstate(self)

    def clear(self, *args):
        return _simanneal.ios_clear(self, *args)

    def setstate(self, __state):
        return _simanneal.ios_setstate(self, __state)

    def good(self):
        return _simanneal.ios_good(self)

    def eof(self):
        return _simanneal.ios_eof(self)

    def fail(self):
        return _simanneal.ios_fail(self)

    def bad(self):
        return _simanneal.ios_bad(self)

    def exceptions(self, *args):
        return _simanneal.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _simanneal.ios_swiginit(self, _simanneal.new_ios(__sb))
    __swig_destroy__ = _simanneal.delete_ios

    def tie(self, *args):
        return _simanneal.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _simanneal.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _simanneal.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _simanneal.ios_fill(self, *args)

    def imbue(self, __loc):
        return _simanneal.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _simanneal.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _simanneal.ios_widen(self, __c)

# Register ios in _simanneal:
_simanneal.ios_swigregister(ios)

class streambuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _simanneal.delete_streambuf

    def pubimbue(self, __loc):
        return _simanneal.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _simanneal.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _simanneal.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _simanneal.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _simanneal.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _simanneal.streambuf_pubsync(self)

    def in_avail(self):
        return _simanneal.streambuf_in_avail(self)

    def snextc(self):
        return _simanneal.streambuf_snextc(self)

    def sbumpc(self):
        return _simanneal.streambuf_sbumpc(self)

    def sgetc(self):
        return _simanneal.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _simanneal.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _simanneal.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _simanneal.streambuf_sungetc(self)

    def sputc(self, __c):
        return _simanneal.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _simanneal.streambuf_sputn(self, __s, __n)

# Register streambuf in _simanneal:
_simanneal.streambuf_swigregister(streambuf)

class string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def length(self):
        return _simanneal.string_length(self)

    def max_size(self):
        return _simanneal.string_max_size(self)

    def capacity(self):
        return _simanneal.string_capacity(self)

    def reserve(self, __res_arg=0):
        return _simanneal.string_reserve(self, __res_arg)

    def copy(self, __s, __n, __pos=0):
        return _simanneal.string_copy(self, __s, __n, __pos)

    def c_str(self):
        return _simanneal.string_c_str(self)

    def find(self, *args):
        return _simanneal.string_find(self, *args)

    def rfind(self, *args):
        return _simanneal.string_rfind(self, *args)

    def find_first_of(self, *args):
        return _simanneal.string_find_first_of(self, *args)

    def find_last_of(self, *args):
        return _simanneal.string_find_last_of(self, *args)

    def find_first_not_of(self, *args):
        return _simanneal.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args):
        return _simanneal.string_find_last_not_of(self, *args)

    def substr(self, *args):
        return _simanneal.string_substr(self, *args)

    def empty(self):
        return _simanneal.string_empty(self)

    def size(self):
        return _simanneal.string_size(self)

    def swap(self, v):
        return _simanneal.string_swap(self, v)

    def begin(self):
        return _simanneal.string_begin(self)

    def end(self):
        return _simanneal.string_end(self)

    def rbegin(self):
        return _simanneal.string_rbegin(self)

    def rend(self):
        return _simanneal.string_rend(self)

    def get_allocator(self):
        return _simanneal.string_get_allocator(self)

    def erase(self, *args):
        return _simanneal.string_erase(self, *args)

    def __init__(self, *args):
        _simanneal.string_swiginit(self, _simanneal.new_string(*args))

    def assign(self, *args):
        return _simanneal.string_assign(self, *args)

    def resize(self, *args):
        return _simanneal.string_resize(self, *args)

    def iterator(self):
        return _simanneal.string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.string___nonzero__(self)

    def __bool__(self):
        return _simanneal.string___bool__(self)

    def __len__(self):
        return _simanneal.string___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.string___setitem__(self, *args)

    def insert(self, *args):
        return _simanneal.string_insert(self, *args)

    def replace(self, *args):
        return _simanneal.string_replace(self, *args)

    def __iadd__(self, v):
        return _simanneal.string___iadd__(self, v)

    def __add__(self, v):
        return _simanneal.string___add__(self, v)

    def __radd__(self, v):
        return _simanneal.string___radd__(self, v)

    def __str__(self):
        return _simanneal.string___str__(self)

    def __rlshift__(self, out):
        return _simanneal.string___rlshift__(self, out)

    def __eq__(self, v):
        return _simanneal.string___eq__(self, v)

    def __ne__(self, v):
        return _simanneal.string___ne__(self, v)

    def __gt__(self, v):
        return _simanneal.string___gt__(self, v)

    def __lt__(self, v):
        return _simanneal.string___lt__(self, v)

    def __ge__(self, v):
        return _simanneal.string___ge__(self, v)

    def __le__(self, v):
        return _simanneal.string___le__(self, v)
    __swig_destroy__ = _simanneal.delete_string

# Register string in _simanneal:
_simanneal.string_swigregister(string)
string.npos = _simanneal.cvar.string_npos

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _simanneal.ostream_swiginit(self, _simanneal.new_ostream(__sb))
    __swig_destroy__ = _simanneal.delete_ostream

    def __lshift__(self, *args):
        return _simanneal.ostream___lshift__(self, *args)

    def put(self, __c):
        return _simanneal.ostream_put(self, __c)

    def write(self, __s, __n):
        return _simanneal.ostream_write(self, __s, __n)

    def flush(self):
        return _simanneal.ostream_flush(self)

    def tellp(self):
        return _simanneal.ostream_tellp(self)

    def seekp(self, *args):
        return _simanneal.ostream_seekp(self, *args)

# Register ostream in _simanneal:
_simanneal.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _simanneal.istream_swiginit(self, _simanneal.new_istream(__sb))
    __swig_destroy__ = _simanneal.delete_istream

    def __rshift__(self, *args):
        return _simanneal.istream___rshift__(self, *args)

    def gcount(self):
        return _simanneal.istream_gcount(self)

    def get(self, *args):
        return _simanneal.istream_get(self, *args)

    def getline(self, *args):
        return _simanneal.istream_getline(self, *args)

    def ignore(self, *args):
        return _simanneal.istream_ignore(self, *args)

    def peek(self):
        return _simanneal.istream_peek(self)

    def read(self, __s, __n):
        return _simanneal.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _simanneal.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _simanneal.istream_putback(self, __c)

    def unget(self):
        return _simanneal.istream_unget(self)

    def sync(self):
        return _simanneal.istream_sync(self)

    def tellg(self):
        return _simanneal.istream_tellg(self)

    def seekg(self, *args):
        return _simanneal.istream_seekg(self, *args)

# Register istream in _simanneal:
_simanneal.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _simanneal.iostream_swiginit(self, _simanneal.new_iostream(__sb))
    __swig_destroy__ = _simanneal.delete_iostream

# Register iostream in _simanneal:
_simanneal.iostream_swigregister(iostream)

endl_cb_ptr = _simanneal.endl_cb_ptr
endl = _simanneal.endl
ends_cb_ptr = _simanneal.ends_cb_ptr
ends = _simanneal.ends
flush_cb_ptr = _simanneal.flush_cb_ptr
flush = _simanneal.flush
class istringstream(istream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.istringstream_swiginit(self, _simanneal.new_istringstream(*args))
    __swig_destroy__ = _simanneal.delete_istringstream

    def rdbuf(self):
        return _simanneal.istringstream_rdbuf(self)

    def str(self, *args):
        return _simanneal.istringstream_str(self, *args)

# Register istringstream in _simanneal:
_simanneal.istringstream_swigregister(istringstream)

class ostringstream(ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.ostringstream_swiginit(self, _simanneal.new_ostringstream(*args))
    __swig_destroy__ = _simanneal.delete_ostringstream

    def rdbuf(self):
        return _simanneal.ostringstream_rdbuf(self)

    def str(self):
        return _simanneal.ostringstream_str(self)

# Register ostringstream in _simanneal:
_simanneal.ostringstream_swigregister(ostringstream)

class stringstream(iostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.stringstream_swiginit(self, _simanneal.new_stringstream(*args))
    __swig_destroy__ = _simanneal.delete_stringstream

    def rdbuf(self):
        return _simanneal.stringstream_rdbuf(self)

    def str(self, *args):
        return _simanneal.stringstream_str(self, *args)

# Register stringstream in _simanneal:
_simanneal.stringstream_swigregister(stringstream)

class NullBuff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def overflow(self, c):
        return _simanneal.NullBuff_overflow(self, c)

    def __init__(self):
        _simanneal.NullBuff_swiginit(self, _simanneal.new_NullBuff())
    __swig_destroy__ = _simanneal.delete_NullBuff

# Register NullBuff in _simanneal:
_simanneal.NullBuff_swigregister(NullBuff)

class nostream(ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _simanneal.nostream_swiginit(self, _simanneal.new_nostream())
    __swig_destroy__ = _simanneal.delete_nostream

# Register nostream in _simanneal:
_simanneal.nostream_swigregister(nostream)

class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MSG = _simanneal.Logger_MSG
    CRT = _simanneal.Logger_CRT
    WRN = _simanneal.Logger_WRN
    DBG = _simanneal.Logger_DBG

    def __init__(self, *args):
        _simanneal.Logger_swiginit(self, _simanneal.new_Logger(*args))

    def debug(self):
        return _simanneal.Logger_debug(self)

    def warning(self):
        return _simanneal.Logger_warning(self)

    def critical(self):
        return _simanneal.Logger_critical(self)

    def echo(self):
        return _simanneal.Logger_echo(self)
    __swig_destroy__ = _simanneal.delete_Logger

# Register Logger in _simanneal:
_simanneal.Logger_swigregister(Logger)

class Stopwatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _simanneal.Stopwatch_swiginit(self, _simanneal.new_Stopwatch())
    __swig_destroy__ = _simanneal.delete_Stopwatch

    def start(self):
        return _simanneal.Stopwatch_start(self)

    def end(self):
        return _simanneal.Stopwatch_end(self)

    def startCount(self):
        return _simanneal.Stopwatch_startCount(self)

    def wallTime(self):
        return _simanneal.Stopwatch_wallTime(self)

    def CPUTime(self):
        return _simanneal.Stopwatch_CPUTime(self)

# Register Stopwatch in _simanneal:
_simanneal.Stopwatch_swigregister(Stopwatch)

class TimeKeeper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _simanneal.TimeKeeper_swiginit(self, _simanneal.new_TimeKeeper())
    __swig_destroy__ = _simanneal.delete_TimeKeeper

    @staticmethod
    def instance():
        return _simanneal.TimeKeeper_instance()

    def createStopwatch(self, key):
        return _simanneal.TimeKeeper_createStopwatch(self, key)

    def getStopwatch(self, key):
        return _simanneal.TimeKeeper_getStopwatch(self, key)

    def printStopwatch(self, key):
        return _simanneal.TimeKeeper_printStopwatch(self, key)

    def printAllStopwatches(self):
        return _simanneal.TimeKeeper_printAllStopwatches(self)

# Register TimeKeeper in _simanneal:
_simanneal.TimeKeeper_swigregister(TimeKeeper)

def TimeKeeper_instance():
    return _simanneal.TimeKeeper_instance()

LinearSchedule = _simanneal.LinearSchedule
ExponentialSchedule = _simanneal.ExponentialSchedule
class EuclCoord3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_simanneal.EuclCoord3d_x_get, _simanneal.EuclCoord3d_x_set)
    y = property(_simanneal.EuclCoord3d_y_get, _simanneal.EuclCoord3d_y_set)
    z = property(_simanneal.EuclCoord3d_z_get, _simanneal.EuclCoord3d_z_set)

    def __init__(self, t_x, t_y, t_z):
        _simanneal.EuclCoord3d_swiginit(self, _simanneal.new_EuclCoord3d(t_x, t_y, t_z))
    __swig_destroy__ = _simanneal.delete_EuclCoord3d

# Register EuclCoord3d in _simanneal:
_simanneal.EuclCoord3d_swigregister(EuclCoord3d)
eta = cvar.eta
Q0 = cvar.Q0
PI = cvar.PI
EPS0 = cvar.EPS0
Kb = cvar.Kb
ERFDB = cvar.ERFDB
POP_STABILITY_ERR = cvar.POP_STABILITY_ERR
RECALC_STABILITY_ERR = cvar.RECALC_STABILITY_ERR

class SimParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _simanneal.SimParams_swiginit(self, _simanneal.new_SimParams())

    def setDBLocs(self, *args):
        return _simanneal.SimParams_setDBLocs(self, *args)

    @staticmethod
    def latToEuclCoord(n, m, l, lat_unit_cell):
        return _simanneal.SimParams_latToEuclCoord(n, m, l, lat_unit_cell)

    def setFixedCharges(self, t_fc_locs, t_fcs, t_fc_eps_rs, t_fc_lambdas):
        return _simanneal.SimParams_setFixedCharges(self, t_fc_locs, t_fcs, t_fc_eps_rs, t_fc_lambdas)
    anneal_cycles = property(_simanneal.SimParams_anneal_cycles_get, _simanneal.SimParams_anneal_cycles_set)
    T_e_inv_point = property(_simanneal.SimParams_T_e_inv_point_get, _simanneal.SimParams_T_e_inv_point_set)
    v_freeze_end_point = property(_simanneal.SimParams_v_freeze_end_point_get, _simanneal.SimParams_v_freeze_end_point_set)
    num_instances = property(_simanneal.SimParams_num_instances_get, _simanneal.SimParams_num_instances_set)
    result_queue_factor = property(_simanneal.SimParams_result_queue_factor_get, _simanneal.SimParams_result_queue_factor_set)
    result_queue_size = property(_simanneal.SimParams_result_queue_size_get, _simanneal.SimParams_result_queue_size_set)
    hop_attempt_factor = property(_simanneal.SimParams_hop_attempt_factor_get, _simanneal.SimParams_hop_attempt_factor_set)
    preanneal_cycles = property(_simanneal.SimParams_preanneal_cycles_get, _simanneal.SimParams_preanneal_cycles_set)
    T_schedule = property(_simanneal.SimParams_T_schedule_get, _simanneal.SimParams_T_schedule_set)
    alpha = property(_simanneal.SimParams_alpha_get, _simanneal.SimParams_alpha_set)
    T_init = property(_simanneal.SimParams_T_init_get, _simanneal.SimParams_T_init_set)
    T_min = property(_simanneal.SimParams_T_min_get, _simanneal.SimParams_T_min_set)
    v_freeze_init = property(_simanneal.SimParams_v_freeze_init_get, _simanneal.SimParams_v_freeze_init_set)
    v_freeze_threshold = property(_simanneal.SimParams_v_freeze_threshold_get, _simanneal.SimParams_v_freeze_threshold_set)
    v_freeze_reset = property(_simanneal.SimParams_v_freeze_reset_get, _simanneal.SimParams_v_freeze_reset_set)
    v_freeze_cycles = property(_simanneal.SimParams_v_freeze_cycles_get, _simanneal.SimParams_v_freeze_cycles_set)
    phys_validity_check_cycles = property(_simanneal.SimParams_phys_validity_check_cycles_get, _simanneal.SimParams_phys_validity_check_cycles_set)
    strategic_v_freeze_reset = property(_simanneal.SimParams_strategic_v_freeze_reset_get, _simanneal.SimParams_strategic_v_freeze_reset_set)
    reset_T_during_v_freeze_reset = property(_simanneal.SimParams_reset_T_during_v_freeze_reset_get, _simanneal.SimParams_reset_T_during_v_freeze_reset_set)
    Kc = property(_simanneal.SimParams_Kc_get, _simanneal.SimParams_Kc_set)
    kT_min = property(_simanneal.SimParams_kT_min_get, _simanneal.SimParams_kT_min_set)
    v_freeze_step = property(_simanneal.SimParams_v_freeze_step_get, _simanneal.SimParams_v_freeze_step_set)
    mu = property(_simanneal.SimParams_mu_get, _simanneal.SimParams_mu_set)
    eps_r = property(_simanneal.SimParams_eps_r_get, _simanneal.SimParams_eps_r_set)
    debye_length = property(_simanneal.SimParams_debye_length_get, _simanneal.SimParams_debye_length_set)
    n_dbs = property(_simanneal.SimParams_n_dbs_get, _simanneal.SimParams_n_dbs_set)
    lat_vec = property(_simanneal.SimParams_lat_vec_get, _simanneal.SimParams_lat_vec_set)
    db_locs = property(_simanneal.SimParams_db_locs_get, _simanneal.SimParams_db_locs_set)
    db_r = property(_simanneal.SimParams_db_r_get, _simanneal.SimParams_db_r_set)
    v_ij = property(_simanneal.SimParams_v_ij_get, _simanneal.SimParams_v_ij_set)
    v_ext = property(_simanneal.SimParams_v_ext_get, _simanneal.SimParams_v_ext_set)
    v_fc = property(_simanneal.SimParams_v_fc_get, _simanneal.SimParams_v_fc_set)

    def pySetVExt(self, s_vec):
        return _simanneal.SimParams_pySetVExt(self, s_vec)

    def pySetFixedCharges(self, eucl_coords, charges, eps_rs, lambdas):
        return _simanneal.SimParams_pySetFixedCharges(self, eucl_coords, charges, eps_rs, lambdas)

    def set_db_locs(self, db_locs):
        if len(db_locs[0]) == 3:
            dbs = IntVectorVector(db_locs)
        elif len(db_locs[0]) == 2:
            dbs = DoublePairVector(db_locs)
        else:
            raise Exception('db_locs[0] must have a length of 2 or 3.')
        self.setDBLocs(dbs)

    def set_v_ext(self, v_ext):
        self.pySetVExt(DoubleVector(v_ext))

    def set_fixed_charges(self, eucl_coords_3d, charges, eps_rs, lambdas):
        self.pySetFixedCharges(
            DoubleVectorVector(eucl_coords_3d),
            DoubleVector(charges),
            DoubleVector(eps_rs),
            DoubleVector(lambdas)
        )

    def set_param(self, pname, pval):
        try:
            self.__swig_setmethods__[pname](self, pval)
        except KeyError:
            print(f'set_param error: {pname} is not a valid SimParams parameter.')
            raise

    __swig_destroy__ = _simanneal.delete_SimParams

# Register SimParams in _simanneal:
_simanneal.SimParams_swigregister(SimParams)

def SimParams_latToEuclCoord(n, m, l, lat_unit_cell):
    return _simanneal.SimParams_latToEuclCoord(n, m, l, lat_unit_cell)

class ChargeConfigResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.ChargeConfigResult_swiginit(self, _simanneal.new_ChargeConfigResult(*args))

    def isResult(self):
        return _simanneal.ChargeConfigResult_isResult(self)
    initialized = property(_simanneal.ChargeConfigResult_initialized_get, _simanneal.ChargeConfigResult_initialized_set)
    config = property(_simanneal.ChargeConfigResult_config_get, _simanneal.ChargeConfigResult_config_set)
    pop_likely_stable = property(_simanneal.ChargeConfigResult_pop_likely_stable_get, _simanneal.ChargeConfigResult_pop_likely_stable_set)
    system_energy = property(_simanneal.ChargeConfigResult_system_energy_get, _simanneal.ChargeConfigResult_system_energy_set)
    __swig_destroy__ = _simanneal.delete_ChargeConfigResult

# Register ChargeConfigResult in _simanneal:
_simanneal.ChargeConfigResult_swigregister(ChargeConfigResult)

class TimeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wall_time = property(_simanneal.TimeInfo_wall_time_get, _simanneal.TimeInfo_wall_time_set)
    cpu_time = property(_simanneal.TimeInfo_cpu_time_get, _simanneal.TimeInfo_cpu_time_set)

    def __init__(self):
        _simanneal.TimeInfo_swiginit(self, _simanneal.new_TimeInfo())
    __swig_destroy__ = _simanneal.delete_TimeInfo

# Register TimeInfo in _simanneal:
_simanneal.TimeInfo_swigregister(TimeInfo)

class SimAnneal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sparams):
        _simanneal.SimAnneal_swiginit(self, _simanneal.new_SimAnneal(sparams))

    def invokeSimAnneal(self):
        return _simanneal.SimAnneal_invokeSimAnneal(self)

    @staticmethod
    def systemEnergy(n_in, qubo=False):
        return _simanneal.SimAnneal_systemEnergy(n_in, qubo)

    @staticmethod
    def isMetastable(n_in):
        return _simanneal.SimAnneal_isMetastable(n_in)

    @staticmethod
    def configToStr(n_in):
        return _simanneal.SimAnneal_configToStr(n_in)

    @staticmethod
    def storeResults(annealer, thread_id):
        return _simanneal.SimAnneal_storeResults(annealer, thread_id)

    def chargeResults(self):
        return _simanneal.SimAnneal_chargeResults(self)

    def energyResults(self):
        return _simanneal.SimAnneal_energyResults(self)

    def suggestedConfigResults(self, tidy):
        return _simanneal.SimAnneal_suggestedConfigResults(self, tidy)

    @staticmethod
    def coulombicPotential(c_1, c_2, eps_r, _lambda, r):
        return _simanneal.SimAnneal_coulombicPotential(c_1, c_2, eps_r, _lambda, r)

    @staticmethod
    def distance(x1, y1, z1, x2, y2, z2):
        return _simanneal.SimAnneal_distance(x1, y1, z1, x2, y2, z2)
    sim_params = property(_simanneal.SimAnneal_sim_params_get, _simanneal.SimAnneal_sim_params_set)
    db_distance_scale = property(_simanneal.SimAnneal_db_distance_scale_get, _simanneal.SimAnneal_db_distance_scale_set)

    def pySuggestedResults(self, tidy):
        return _simanneal.SimAnneal_pySuggestedResults(self, tidy)

    from collections import namedtuple
    ChargeResult = namedtuple('ChargeResult', ['config', 'energy'])

    def suggested_gs_results(self, tidy=True):
        configs = []
        for conf in self.pySuggestedResults(tidy):
            chg_cfg = [chg for chg in conf[0]]
            configs.append(self.ChargeResult(chg_cfg, conf[1]))
        return configs

    __swig_destroy__ = _simanneal.delete_SimAnneal

# Register SimAnneal in _simanneal:
_simanneal.SimAnneal_swigregister(SimAnneal)

def SimAnneal_systemEnergy(n_in, qubo=False):
    return _simanneal.SimAnneal_systemEnergy(n_in, qubo)

def SimAnneal_isMetastable(n_in):
    return _simanneal.SimAnneal_isMetastable(n_in)

def SimAnneal_configToStr(n_in):
    return _simanneal.SimAnneal_configToStr(n_in)

def SimAnneal_storeResults(annealer, thread_id):
    return _simanneal.SimAnneal_storeResults(annealer, thread_id)

def SimAnneal_coulombicPotential(c_1, c_2, eps_r, _lambda, r):
    return _simanneal.SimAnneal_coulombicPotential(c_1, c_2, eps_r, _lambda, r)

def SimAnneal_distance(x1, y1, z1, x2, y2, z2):
    return _simanneal.SimAnneal_distance(x1, y1, z1, x2, y2, z2)

class SimAnnealThread(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PopulationUpdateMode = _simanneal.SimAnnealThread_PopulationUpdateMode
    PhysicalValidityCheckMode = _simanneal.SimAnnealThread_PhysicalValidityCheckMode
    PopulationUpdateFinished = _simanneal.SimAnnealThread_PopulationUpdateFinished

    def __init__(self, t_thread_id, seed):
        _simanneal.SimAnnealThread_swiginit(self, _simanneal.new_SimAnnealThread(t_thread_id, seed))
    __swig_destroy__ = _simanneal.delete_SimAnnealThread

    def run(self):
        return _simanneal.SimAnnealThread_run(self)

    def suggestedConfig(self):
        return _simanneal.SimAnnealThread_suggestedConfig(self)
    thread_id = property(_simanneal.SimAnnealThread_thread_id_get, _simanneal.SimAnnealThread_thread_id_set)
    db_charges = property(_simanneal.SimAnnealThread_db_charges_get, _simanneal.SimAnnealThread_db_charges_set)
    config_energies = property(_simanneal.SimAnnealThread_config_energies_get, _simanneal.SimAnnealThread_config_energies_set)

# Register SimAnnealThread in _simanneal:
_simanneal.SimAnnealThread_swigregister(SimAnnealThread)

class DoublePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.DoublePair_swiginit(self, _simanneal.new_DoublePair(*args))
    first = property(_simanneal.DoublePair_first_get, _simanneal.DoublePair_first_set)
    second = property(_simanneal.DoublePair_second_get, _simanneal.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _simanneal.delete_DoublePair

# Register DoublePair in _simanneal:
_simanneal.DoublePair_swigregister(DoublePair)

class DoublePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.DoublePairVector___bool__(self)

    def __len__(self):
        return _simanneal.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.DoublePairVector_pop(self)

    def append(self, x):
        return _simanneal.DoublePairVector_append(self, x)

    def empty(self):
        return _simanneal.DoublePairVector_empty(self)

    def size(self):
        return _simanneal.DoublePairVector_size(self)

    def swap(self, v):
        return _simanneal.DoublePairVector_swap(self, v)

    def begin(self):
        return _simanneal.DoublePairVector_begin(self)

    def end(self):
        return _simanneal.DoublePairVector_end(self)

    def rbegin(self):
        return _simanneal.DoublePairVector_rbegin(self)

    def rend(self):
        return _simanneal.DoublePairVector_rend(self)

    def clear(self):
        return _simanneal.DoublePairVector_clear(self)

    def get_allocator(self):
        return _simanneal.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.DoublePairVector_swiginit(self, _simanneal.new_DoublePairVector(*args))

    def push_back(self, x):
        return _simanneal.DoublePairVector_push_back(self, x)

    def front(self):
        return _simanneal.DoublePairVector_front(self)

    def back(self):
        return _simanneal.DoublePairVector_back(self)

    def assign(self, n, x):
        return _simanneal.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _simanneal.DoublePairVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_DoublePairVector

# Register DoublePairVector in _simanneal:
_simanneal.DoublePairVector_swigregister(DoublePairVector)

class FloatPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.FloatPair_swiginit(self, _simanneal.new_FloatPair(*args))
    first = property(_simanneal.FloatPair_first_get, _simanneal.FloatPair_first_set)
    second = property(_simanneal.FloatPair_second_get, _simanneal.FloatPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _simanneal.delete_FloatPair

# Register FloatPair in _simanneal:
_simanneal.FloatPair_swigregister(FloatPair)

class FloatPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.FloatPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.FloatPairVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.FloatPairVector___bool__(self)

    def __len__(self):
        return _simanneal.FloatPairVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.FloatPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.FloatPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.FloatPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.FloatPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.FloatPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.FloatPairVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.FloatPairVector_pop(self)

    def append(self, x):
        return _simanneal.FloatPairVector_append(self, x)

    def empty(self):
        return _simanneal.FloatPairVector_empty(self)

    def size(self):
        return _simanneal.FloatPairVector_size(self)

    def swap(self, v):
        return _simanneal.FloatPairVector_swap(self, v)

    def begin(self):
        return _simanneal.FloatPairVector_begin(self)

    def end(self):
        return _simanneal.FloatPairVector_end(self)

    def rbegin(self):
        return _simanneal.FloatPairVector_rbegin(self)

    def rend(self):
        return _simanneal.FloatPairVector_rend(self)

    def clear(self):
        return _simanneal.FloatPairVector_clear(self)

    def get_allocator(self):
        return _simanneal.FloatPairVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.FloatPairVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.FloatPairVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.FloatPairVector_swiginit(self, _simanneal.new_FloatPairVector(*args))

    def push_back(self, x):
        return _simanneal.FloatPairVector_push_back(self, x)

    def front(self):
        return _simanneal.FloatPairVector_front(self)

    def back(self):
        return _simanneal.FloatPairVector_back(self)

    def assign(self, n, x):
        return _simanneal.FloatPairVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.FloatPairVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.FloatPairVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.FloatPairVector_reserve(self, n)

    def capacity(self):
        return _simanneal.FloatPairVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_FloatPairVector

# Register FloatPairVector in _simanneal:
_simanneal.FloatPairVector_swigregister(FloatPairVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.FloatVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.FloatVector___bool__(self)

    def __len__(self):
        return _simanneal.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.FloatVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.FloatVector_pop(self)

    def append(self, x):
        return _simanneal.FloatVector_append(self, x)

    def empty(self):
        return _simanneal.FloatVector_empty(self)

    def size(self):
        return _simanneal.FloatVector_size(self)

    def swap(self, v):
        return _simanneal.FloatVector_swap(self, v)

    def begin(self):
        return _simanneal.FloatVector_begin(self)

    def end(self):
        return _simanneal.FloatVector_end(self)

    def rbegin(self):
        return _simanneal.FloatVector_rbegin(self)

    def rend(self):
        return _simanneal.FloatVector_rend(self)

    def clear(self):
        return _simanneal.FloatVector_clear(self)

    def get_allocator(self):
        return _simanneal.FloatVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.FloatVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.FloatVector_swiginit(self, _simanneal.new_FloatVector(*args))

    def push_back(self, x):
        return _simanneal.FloatVector_push_back(self, x)

    def front(self):
        return _simanneal.FloatVector_front(self)

    def back(self):
        return _simanneal.FloatVector_back(self)

    def assign(self, n, x):
        return _simanneal.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.FloatVector_reserve(self, n)

    def capacity(self):
        return _simanneal.FloatVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_FloatVector

# Register FloatVector in _simanneal:
_simanneal.FloatVector_swigregister(FloatVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.DoubleVector___bool__(self)

    def __len__(self):
        return _simanneal.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.DoubleVector_pop(self)

    def append(self, x):
        return _simanneal.DoubleVector_append(self, x)

    def empty(self):
        return _simanneal.DoubleVector_empty(self)

    def size(self):
        return _simanneal.DoubleVector_size(self)

    def swap(self, v):
        return _simanneal.DoubleVector_swap(self, v)

    def begin(self):
        return _simanneal.DoubleVector_begin(self)

    def end(self):
        return _simanneal.DoubleVector_end(self)

    def rbegin(self):
        return _simanneal.DoubleVector_rbegin(self)

    def rend(self):
        return _simanneal.DoubleVector_rend(self)

    def clear(self):
        return _simanneal.DoubleVector_clear(self)

    def get_allocator(self):
        return _simanneal.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.DoubleVector_swiginit(self, _simanneal.new_DoubleVector(*args))

    def push_back(self, x):
        return _simanneal.DoubleVector_push_back(self, x)

    def front(self):
        return _simanneal.DoubleVector_front(self)

    def back(self):
        return _simanneal.DoubleVector_back(self)

    def assign(self, n, x):
        return _simanneal.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.DoubleVector_reserve(self, n)

    def capacity(self):
        return _simanneal.DoubleVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_DoubleVector

# Register DoubleVector in _simanneal:
_simanneal.DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.DoubleVectorVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.DoubleVectorVector___bool__(self)

    def __len__(self):
        return _simanneal.DoubleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.DoubleVectorVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.DoubleVectorVector_pop(self)

    def append(self, x):
        return _simanneal.DoubleVectorVector_append(self, x)

    def empty(self):
        return _simanneal.DoubleVectorVector_empty(self)

    def size(self):
        return _simanneal.DoubleVectorVector_size(self)

    def swap(self, v):
        return _simanneal.DoubleVectorVector_swap(self, v)

    def begin(self):
        return _simanneal.DoubleVectorVector_begin(self)

    def end(self):
        return _simanneal.DoubleVectorVector_end(self)

    def rbegin(self):
        return _simanneal.DoubleVectorVector_rbegin(self)

    def rend(self):
        return _simanneal.DoubleVectorVector_rend(self)

    def clear(self):
        return _simanneal.DoubleVectorVector_clear(self)

    def get_allocator(self):
        return _simanneal.DoubleVectorVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.DoubleVectorVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.DoubleVectorVector_swiginit(self, _simanneal.new_DoubleVectorVector(*args))

    def push_back(self, x):
        return _simanneal.DoubleVectorVector_push_back(self, x)

    def front(self):
        return _simanneal.DoubleVectorVector_front(self)

    def back(self):
        return _simanneal.DoubleVectorVector_back(self)

    def assign(self, n, x):
        return _simanneal.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.DoubleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.DoubleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.DoubleVectorVector_reserve(self, n)

    def capacity(self):
        return _simanneal.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_DoubleVectorVector

# Register DoubleVectorVector in _simanneal:
_simanneal.DoubleVectorVector_swigregister(DoubleVectorVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.IntVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.IntVector___bool__(self)

    def __len__(self):
        return _simanneal.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.IntVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.IntVector_pop(self)

    def append(self, x):
        return _simanneal.IntVector_append(self, x)

    def empty(self):
        return _simanneal.IntVector_empty(self)

    def size(self):
        return _simanneal.IntVector_size(self)

    def swap(self, v):
        return _simanneal.IntVector_swap(self, v)

    def begin(self):
        return _simanneal.IntVector_begin(self)

    def end(self):
        return _simanneal.IntVector_end(self)

    def rbegin(self):
        return _simanneal.IntVector_rbegin(self)

    def rend(self):
        return _simanneal.IntVector_rend(self)

    def clear(self):
        return _simanneal.IntVector_clear(self)

    def get_allocator(self):
        return _simanneal.IntVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.IntVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.IntVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.IntVector_swiginit(self, _simanneal.new_IntVector(*args))

    def push_back(self, x):
        return _simanneal.IntVector_push_back(self, x)

    def front(self):
        return _simanneal.IntVector_front(self)

    def back(self):
        return _simanneal.IntVector_back(self)

    def assign(self, n, x):
        return _simanneal.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.IntVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.IntVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.IntVector_reserve(self, n)

    def capacity(self):
        return _simanneal.IntVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_IntVector

# Register IntVector in _simanneal:
_simanneal.IntVector_swigregister(IntVector)

class IntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.IntVectorVector___bool__(self)

    def __len__(self):
        return _simanneal.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.IntVectorVector_pop(self)

    def append(self, x):
        return _simanneal.IntVectorVector_append(self, x)

    def empty(self):
        return _simanneal.IntVectorVector_empty(self)

    def size(self):
        return _simanneal.IntVectorVector_size(self)

    def swap(self, v):
        return _simanneal.IntVectorVector_swap(self, v)

    def begin(self):
        return _simanneal.IntVectorVector_begin(self)

    def end(self):
        return _simanneal.IntVectorVector_end(self)

    def rbegin(self):
        return _simanneal.IntVectorVector_rbegin(self)

    def rend(self):
        return _simanneal.IntVectorVector_rend(self)

    def clear(self):
        return _simanneal.IntVectorVector_clear(self)

    def get_allocator(self):
        return _simanneal.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.IntVectorVector_swiginit(self, _simanneal.new_IntVectorVector(*args))

    def push_back(self, x):
        return _simanneal.IntVectorVector_push_back(self, x)

    def front(self):
        return _simanneal.IntVectorVector_front(self)

    def back(self):
        return _simanneal.IntVectorVector_back(self)

    def assign(self, n, x):
        return _simanneal.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _simanneal.IntVectorVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_IntVectorVector

# Register IntVectorVector in _simanneal:
_simanneal.IntVectorVector_swigregister(IntVectorVector)

class StringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _simanneal.StringPair_swiginit(self, _simanneal.new_StringPair(*args))
    first = property(_simanneal.StringPair_first_get, _simanneal.StringPair_first_set)
    second = property(_simanneal.StringPair_second_get, _simanneal.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _simanneal.delete_StringPair

# Register StringPair in _simanneal:
_simanneal.StringPair_swigregister(StringPair)

class StringPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringPairVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringPairVector___bool__(self)

    def __len__(self):
        return _simanneal.StringPairVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.StringPairVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.StringPairVector_pop(self)

    def append(self, x):
        return _simanneal.StringPairVector_append(self, x)

    def empty(self):
        return _simanneal.StringPairVector_empty(self)

    def size(self):
        return _simanneal.StringPairVector_size(self)

    def swap(self, v):
        return _simanneal.StringPairVector_swap(self, v)

    def begin(self):
        return _simanneal.StringPairVector_begin(self)

    def end(self):
        return _simanneal.StringPairVector_end(self)

    def rbegin(self):
        return _simanneal.StringPairVector_rbegin(self)

    def rend(self):
        return _simanneal.StringPairVector_rend(self)

    def clear(self):
        return _simanneal.StringPairVector_clear(self)

    def get_allocator(self):
        return _simanneal.StringPairVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.StringPairVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.StringPairVector_swiginit(self, _simanneal.new_StringPairVector(*args))

    def push_back(self, x):
        return _simanneal.StringPairVector_push_back(self, x)

    def front(self):
        return _simanneal.StringPairVector_front(self)

    def back(self):
        return _simanneal.StringPairVector_back(self)

    def assign(self, n, x):
        return _simanneal.StringPairVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.StringPairVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.StringPairVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.StringPairVector_reserve(self, n)

    def capacity(self):
        return _simanneal.StringPairVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_StringPairVector

# Register StringPairVector in _simanneal:
_simanneal.StringPairVector_swigregister(StringPairVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringVector___bool__(self)

    def __len__(self):
        return _simanneal.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.StringVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.StringVector_pop(self)

    def append(self, x):
        return _simanneal.StringVector_append(self, x)

    def empty(self):
        return _simanneal.StringVector_empty(self)

    def size(self):
        return _simanneal.StringVector_size(self)

    def swap(self, v):
        return _simanneal.StringVector_swap(self, v)

    def begin(self):
        return _simanneal.StringVector_begin(self)

    def end(self):
        return _simanneal.StringVector_end(self)

    def rbegin(self):
        return _simanneal.StringVector_rbegin(self)

    def rend(self):
        return _simanneal.StringVector_rend(self)

    def clear(self):
        return _simanneal.StringVector_clear(self)

    def get_allocator(self):
        return _simanneal.StringVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.StringVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.StringVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.StringVector_swiginit(self, _simanneal.new_StringVector(*args))

    def push_back(self, x):
        return _simanneal.StringVector_push_back(self, x)

    def front(self):
        return _simanneal.StringVector_front(self)

    def back(self):
        return _simanneal.StringVector_back(self)

    def assign(self, n, x):
        return _simanneal.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.StringVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.StringVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.StringVector_reserve(self, n)

    def capacity(self):
        return _simanneal.StringVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_StringVector

# Register StringVector in _simanneal:
_simanneal.StringVector_swigregister(StringVector)

class StringVector2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringVector2D___bool__(self)

    def __len__(self):
        return _simanneal.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _simanneal.StringVector2D_pop(self)

    def append(self, x):
        return _simanneal.StringVector2D_append(self, x)

    def empty(self):
        return _simanneal.StringVector2D_empty(self)

    def size(self):
        return _simanneal.StringVector2D_size(self)

    def swap(self, v):
        return _simanneal.StringVector2D_swap(self, v)

    def begin(self):
        return _simanneal.StringVector2D_begin(self)

    def end(self):
        return _simanneal.StringVector2D_end(self)

    def rbegin(self):
        return _simanneal.StringVector2D_rbegin(self)

    def rend(self):
        return _simanneal.StringVector2D_rend(self)

    def clear(self):
        return _simanneal.StringVector2D_clear(self)

    def get_allocator(self):
        return _simanneal.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _simanneal.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _simanneal.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        _simanneal.StringVector2D_swiginit(self, _simanneal.new_StringVector2D(*args))

    def push_back(self, x):
        return _simanneal.StringVector2D_push_back(self, x)

    def front(self):
        return _simanneal.StringVector2D_front(self)

    def back(self):
        return _simanneal.StringVector2D_back(self)

    def assign(self, n, x):
        return _simanneal.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _simanneal.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _simanneal.StringVector2D_reserve(self, n)

    def capacity(self):
        return _simanneal.StringVector2D_capacity(self)
    __swig_destroy__ = _simanneal.delete_StringVector2D

# Register StringVector2D in _simanneal:
_simanneal.StringVector2D_swigregister(StringVector2D)

class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.StringMap___nonzero__(self)

    def __bool__(self):
        return _simanneal.StringMap___bool__(self)

    def __len__(self):
        return _simanneal.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _simanneal.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _simanneal.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _simanneal.StringMap_has_key(self, key)

    def keys(self):
        return _simanneal.StringMap_keys(self)

    def values(self):
        return _simanneal.StringMap_values(self)

    def items(self):
        return _simanneal.StringMap_items(self)

    def __contains__(self, key):
        return _simanneal.StringMap___contains__(self, key)

    def key_iterator(self):
        return _simanneal.StringMap_key_iterator(self)

    def value_iterator(self):
        return _simanneal.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _simanneal.StringMap___setitem__(self, *args)

    def asdict(self):
        return _simanneal.StringMap_asdict(self)

    def __init__(self, *args):
        _simanneal.StringMap_swiginit(self, _simanneal.new_StringMap(*args))

    def empty(self):
        return _simanneal.StringMap_empty(self)

    def size(self):
        return _simanneal.StringMap_size(self)

    def swap(self, v):
        return _simanneal.StringMap_swap(self, v)

    def begin(self):
        return _simanneal.StringMap_begin(self)

    def end(self):
        return _simanneal.StringMap_end(self)

    def rbegin(self):
        return _simanneal.StringMap_rbegin(self)

    def rend(self):
        return _simanneal.StringMap_rend(self)

    def clear(self):
        return _simanneal.StringMap_clear(self)

    def get_allocator(self):
        return _simanneal.StringMap_get_allocator(self)

    def count(self, x):
        return _simanneal.StringMap_count(self, x)

    def erase(self, *args):
        return _simanneal.StringMap_erase(self, *args)

    def find(self, x):
        return _simanneal.StringMap_find(self, x)

    def lower_bound(self, x):
        return _simanneal.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _simanneal.StringMap_upper_bound(self, x)
    __swig_destroy__ = _simanneal.delete_StringMap

# Register StringMap in _simanneal:
_simanneal.StringMap_swigregister(StringMap)

class ConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _simanneal.ConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simanneal.ConfigVector___nonzero__(self)

    def __bool__(self):
        return _simanneal.ConfigVector___bool__(self)

    def __len__(self):
        return _simanneal.ConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _simanneal.ConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simanneal.ConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simanneal.ConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simanneal.ConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simanneal.ConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simanneal.ConfigVector___setitem__(self, *args)

    def pop(self):
        return _simanneal.ConfigVector_pop(self)

    def append(self, x):
        return _simanneal.ConfigVector_append(self, x)

    def empty(self):
        return _simanneal.ConfigVector_empty(self)

    def size(self):
        return _simanneal.ConfigVector_size(self)

    def swap(self, v):
        return _simanneal.ConfigVector_swap(self, v)

    def begin(self):
        return _simanneal.ConfigVector_begin(self)

    def end(self):
        return _simanneal.ConfigVector_end(self)

    def rbegin(self):
        return _simanneal.ConfigVector_rbegin(self)

    def rend(self):
        return _simanneal.ConfigVector_rend(self)

    def clear(self):
        return _simanneal.ConfigVector_clear(self)

    def get_allocator(self):
        return _simanneal.ConfigVector_get_allocator(self)

    def pop_back(self):
        return _simanneal.ConfigVector_pop_back(self)

    def erase(self, *args):
        return _simanneal.ConfigVector_erase(self, *args)

    def __init__(self, *args):
        _simanneal.ConfigVector_swiginit(self, _simanneal.new_ConfigVector(*args))

    def push_back(self, x):
        return _simanneal.ConfigVector_push_back(self, x)

    def front(self):
        return _simanneal.ConfigVector_front(self)

    def back(self):
        return _simanneal.ConfigVector_back(self)

    def assign(self, n, x):
        return _simanneal.ConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _simanneal.ConfigVector_resize(self, *args)

    def insert(self, *args):
        return _simanneal.ConfigVector_insert(self, *args)

    def reserve(self, n):
        return _simanneal.ConfigVector_reserve(self, n)

    def capacity(self):
        return _simanneal.ConfigVector_capacity(self)
    __swig_destroy__ = _simanneal.delete_ConfigVector

# Register ConfigVector in _simanneal:
_simanneal.ConfigVector_swigregister(ConfigVector)



